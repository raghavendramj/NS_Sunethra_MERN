What Is React?
	React is a declarative, efficient, and flexible JavaScript library for building user interfaces.
	It lets you compose complex UIs from small and isolated pieces of code called “components”.


Why we use React?
	The main objective of ReactJS is to develop User Interfaces (UI) that improves the speed of the apps.
	It uses Virtual DOM(JavaScript Object) which improves performance of the application.
	JavaScript Virtua DOM is faster than the regular DOM.
	We can use ReactJS on the client and server side as well with other frameworks.
	It uses component	 and data patterns that improves readability and helps too maintain larger apps


React Environment Setup

Pre-requisite for ReactJS
---------------------------
NodeJS and NPM
React and React DOM
Webpack
Babel


Ways to install ReactJS
There are 2 ways to setup the environment for successful reactJs application.

Using the following npm command

	mkdir reactproject
	cd /reactproject/
	npm init -y
	npm install react react-dom --save
	npm install webpack webpack-dev-server webpack-cli --save
	npm install babel-core babel-loader babel-preset-env babel-preset-react babel-webpack-plugin --save-dev

	mkdir reactproject
	cd /reactproject/
	npm install -g create-react-app
	create-react-app mynewtonschoolreactapp

React Features
	JSX - JavaScript Syntax Extension
	JSX is a preferable choice for many web developers. It isn't necessary to use JSX in React development, but there is a massive difference between writing react.js documents in JSX and JavaScript. JSX is a syntax extension to JavaScript. By using that, we can write HTML structures in the same file that contains JavaScript code.

	Unidirectional Data Flow
		React.js is designed so that it will only support data that is flowing downstream, in one direction. If the data has to flow in another direction, you will need to additional features
	Virtual Document Object Model (VDOM)


How to install bootstrap is  :- 
	npm install react-bootstrap bootstrap
	
	CSS:- The following line has to be included in index.js
	import 'bootstrap/dist/css/bootstrap.min.css';

React End Project :-
	-> Creating A Budget Tracker Application
		-> Like Splitwise
	-> Add a category
	-> Add an expense
	-> View an expense
	-> Remove an expense
	-> Categorize expense
	-> View Totals
	
	
React Class Component
	Independent reusable bits of code.
	extends React.Component
	needs render() method invocation.
	
React States
	This state is an updateable structure that is used to contain data/info about the component.
	The state inside a component can change over time.
	The change can happen in 2 different ways:
		1. Response to user action
		2. System Event
	A state must be kept as simple as possible.
	The state changes cab be asynchronous
	State can't access its child component information
	Can be used to render dynamic changes only
	We can't/shouldn't modify the state, it must directly be modified by using
	setState() method only.
	ex:- {color: red}
	state.color = 'green'; -> WRONG
	
	Correct way of updating state is...	
	1. Make a copy let stateCopy = [...state];
	2. do the necessary modifications in copy of the state.
		stateCopy.color = "green";
	3. update the state using setState(stateCopy);
	
	We do this because, setState() -> trigger UI updates.
	

Lifecycle of Components
	Three phases of lifecycle are...
	1. Mounting
		Four built in methods, these are called in sequence
		1. constructor()
		2. getDerivedStateFromProps()
		3. render()
		4. componentDidMount()
	2. Updating
	3. Unmounting
	


